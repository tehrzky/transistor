name: Build Transistor with Google Drive Sync

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout original Transistor
      run: |
        git clone https://codeberg.org/y20k/transistor.git .
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Add Google Drive sync permissions
      run: |
        # Add Google Drive permission to AndroidManifest.xml
        sed -i '/<uses-permission android:name="android.permission.WAKE_LOCK" \/>/a\    <uses-permission android:name="android.permission.GET_ACCOUNTS" \/>' app/src/main/AndroidManifest.xml
        
        # Add sync settings activity to manifest
        sed -i '/<\/application>/i\        <activity\n            android:name="org.y20k.transistor.ui.SyncSettingsActivity"\n            android:label="Google Drive Sync"\n            android:exported="false" \/>' app/src/main/AndroidManifest.xml
        
    - name: Add Google Drive dependencies
      run: |
        # Add Google Drive dependencies to build.gradle
        sed -i '/implementation.*androidx.work:work-runtime-ktx/a\    implementation '\''com.google.apis:google-api-services-drive:v3-rev20220815-2.0.0'\''\n    implementation '\''com.google.api-client:google-api-client-android:1.23.0'\''\n    implementation '\''com.google.oauth-client:google-oauth-client-jetty:1.23.0'\''\n    implementation '\''com.google.android.gms:play-services-auth:20.7.0'\''\n    implementation '\''com.google.code.gson:gson:2.10.1'\''' app/build.gradle
        
    - name: Create sync directory
      run: |
        mkdir -p app/src/main/java/org/y20k/transistor/sync
        mkdir -p app/src/main/java/org/y20k/transistor/ui
        
    - name: Add Google Drive Sync Service
      run: |
        cat > app/src/main/java/org/y20k/transistor/sync/GoogleDriveSyncService.kt << 'EOF'
        package org.y20k.transistor.sync
        
        import android.content.Context
        import android.util.Log
        import com.google.android.gms.auth.api.signin.GoogleSignIn
        import com.google.api.client.extensions.android.http.AndroidHttp
        import com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAccountCredential
        import com.google.api.client.json.gson.GsonFactory
        import com.google.api.services.drive.Drive
        import com.google.api.services.drive.DriveScopes
        import com.google.api.services.drive.model.File
        import com.google.gson.Gson
        import com.google.gson.reflect.TypeToken
        import kotlinx.coroutines.Dispatchers
        import kotlinx.coroutines.withContext
        import org.y20k.transistor.core.Station
        import java.io.ByteArrayOutputStream
        import java.util.*
        
        class GoogleDriveSyncService(private val context: Context) {
            
            companion object {
                private const val TAG = "GoogleDriveSync"
                private const val TRANSISTOR_FOLDER = "Transistor_Backup"
                private const val STATIONS_FILE = "stations.json"
                private const val APPLICATION_NAME = "Transistor Radio App"
            }
            
            private var driveService: Drive? = null
            
            suspend fun initialize(): Boolean = withContext(Dispatchers.IO) {
                try {
                    val account = GoogleSignIn.getLastSignedInAccount(context)
                    if (account == null) {
                        Log.e(TAG, "No signed-in Google account found")
                        return@withContext false
                    }
                    
                    val credential = GoogleAccountCredential.usingOAuth2(
                        context, listOf(DriveScopes.DRIVE_FILE)
                    )
                    credential.selectedAccount = account.account
                    
                    driveService = Drive.Builder(
                        AndroidHttp.newCompatibleTransport(),
                        GsonFactory.getDefaultInstance(),
                        credential
                    ).setApplicationName(APPLICATION_NAME).build()
                    
                    true
                } catch (e: Exception) {
                    Log.e(TAG, "Failed to initialize Drive service", e)
                    false
                }
            }
            
            private suspend fun getOrCreateBackupFolder(): String? = withContext(Dispatchers.IO) {
                try {
                    val service = driveService ?: return@withContext null
                    
                    val result = service.files().list()
                        .setQ("name='$TRANSISTOR_FOLDER' and mimeType='application/vnd.google-apps.folder' and trashed=false")
                        .execute()
                    
                    if (result.files.isNotEmpty()) {
                        return@withContext result.files[0].id
                    }
                    
                    val folderMetadata = File()
                    folderMetadata.name = TRANSISTOR_FOLDER
                    folderMetadata.mimeType = "application/vnd.google-apps.folder"
                    
                    val folder = service.files().create(folderMetadata).execute()
                    folder.id
                } catch (e: Exception) {
                    Log.e(TAG, "Failed to create backup folder", e)
                    null
                }
            }
            
            suspend fun uploadStations(stations: List<Station>): Boolean = withContext(Dispatchers.IO) {
                try {
                    val service = driveService ?: return@withContext false
                    val folderId = getOrCreateBackupFolder() ?: return@withContext false
                    
                    val gson = Gson()
                    val stationsJson = gson.toJson(stations)
                    
                    val fileMetadata = File()
                    fileMetadata.name = STATIONS_FILE
                    fileMetadata.parents = listOf(folderId)
                    
                    val mediaContent = com.google.api.client.http.ByteArrayContent(
                        "application/json",
                        stationsJson.toByteArray()
                    )
                    
                    service.files().create(fileMetadata, mediaContent).execute()
                    Log.i(TAG, "Stations uploaded successfully")
                    true
                } catch (e: Exception) {
                    Log.e(TAG, "Failed to upload stations", e)
                    false
                }
            }
            
            suspend fun downloadStations(): List<Station>? = withContext(Dispatchers.IO) {
                try {
                    Log.i(TAG, "Download function called")
                    emptyList<Station>()
                } catch (e: Exception) {
                    Log.e(TAG, "Failed to download stations", e)
                    null
                }
            }
        }
        EOF
        
    - name: Add Google Sign-In Helper
      run: |
        cat > app/src/main/java/org/y20k/transistor/sync/GoogleSignInHelper.kt << 'EOF'
        package org.y20k.transistor.sync
        
        import android.content.Context
        import android.content.Intent
        import com.google.android.gms.auth.api.signin.GoogleSignIn
        import com.google.android.gms.auth.api.signin.GoogleSignInClient
        import com.google.android.gms.auth.api.signin.GoogleSignInOptions
        import com.google.android.gms.common.api.Scope
        import com.google.api.services.drive.DriveScopes
        
        class GoogleSignInHelper(private val context: Context) {
            
            companion object {
                const val RC_SIGN_IN = 9001
            }
            
            private val signInClient: GoogleSignInClient
            
            init {
                val signInOptions = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
                    .requestEmail()
                    .requestScopes(Scope(DriveScopes.DRIVE_FILE))
                    .build()
                
                signInClient = GoogleSignIn.getClient(context, signInOptions)
            }
            
            fun isSignedIn(): Boolean {
                return GoogleSignIn.getLastSignedInAccount(context) != null
            }
            
            fun getSignInIntent(): Intent {
                return signInClient.signInIntent
            }
            
            fun signOut(callback: () -> Unit) {
                signInClient.signOut().addOnCompleteListener {
                    callback()
                }
            }
            
            fun getSignedInAccountEmail(): String? {
                return GoogleSignIn.getLastSignedInAccount(context)?.email
            }
        }
        EOF
        
    - name: Add Sync Settings Activity
      run: |
        cat > app/src/main/java/org/y20k/transistor/ui/SyncSettingsActivity.kt << 'EOF'
        package org.y20k.transistor.ui
        
        import android.app.Activity
        import android.content.Intent
        import android.os.Bundle
        import android.view.View
        import android.widget.*
        import androidx.activity.result.contract.ActivityResultContracts
        import androidx.appcompat.app.AppCompatActivity
        import androidx.lifecycle.lifecycleScope
        import kotlinx.coroutines.launch
        import org.y20k.transistor.core.Collection
        import org.y20k.transistor.sync.GoogleDriveSyncService
        import org.y20k.transistor.sync.GoogleSignInHelper
        
        class SyncSettingsActivity : AppCompatActivity() {
            
            private lateinit var googleSignInHelper: GoogleSignInHelper
            private lateinit var syncService: GoogleDriveSyncService
            private lateinit var statusText: TextView
            private lateinit var signInBtn: Button
            private lateinit var backupBtn: Button
            private lateinit var restoreBtn: Button
            private lateinit var signOutBtn: Button
            
            private val signInLauncher = registerForActivityResult(
                ActivityResultContracts.StartActivityForResult()
            ) { result ->
                if (result.resultCode == Activity.RESULT_OK) {
                    initializeSyncService()
                    updateSignInStatus()
                } else {
                    Toast.makeText(this, "Google Sign-In failed", Toast.LENGTH_SHORT).show()
                }
            }
            
            override fun onCreate(savedInstanceState: Bundle?) {
                super.onCreate(savedInstanceState)
                
                createLayout()
                
                googleSignInHelper = GoogleSignInHelper(this)
                syncService = GoogleDriveSyncService(this)
                
                setupClickListeners()
                updateSignInStatus()
            }
            
            private fun createLayout() {
                val layout = LinearLayout(this)
                layout.orientation = LinearLayout.VERTICAL
                layout.setPadding(50, 50, 50, 50)
                
                val title = TextView(this)
                title.text = "Google Drive Sync"
                title.textSize = 24f
                title.setPadding(0, 0, 0, 30)
                layout.addView(title)
                
                statusText = TextView(this)
                statusText.text = "Not signed in"
                statusText.setPadding(0, 0, 0, 20)
                layout.addView(statusText)
                
                signInBtn = Button(this)
                signInBtn.text = "Sign in with Google"
                layout.addView(signInBtn)
                
                backupBtn = Button(this)
                backupBtn.text = "Backup Stations"
                layout.addView(backupBtn)
                
                restoreBtn = Button(this)
                restoreBtn.text = "Restore Stations"
                layout.addView(restoreBtn)
                
                signOutBtn = Button(this)
                signOutBtn.text = "Sign Out"
                layout.addView(signOutBtn)
                
                setContentView(layout)
            }
            
            private fun setupClickListeners() {
                signInBtn.setOnClickListener { signInToGoogle() }
                backupBtn.setOnClickListener { performBackup() }
                restoreBtn.setOnClickListener { performRestore() }
                signOutBtn.setOnClickListener { signOutFromGoogle() }
            }
            
            private fun updateSignInStatus() {
                val isSignedIn = googleSignInHelper.isSignedIn()
                
                if (isSignedIn) {
                    statusText.text = "Signed in as: ${googleSignInHelper.getSignedInAccountEmail()}"
                    signInBtn.visibility = View.GONE
                    backupBtn.visibility = View.VISIBLE
                    restoreBtn.visibility = View.VISIBLE
                    signOutBtn.visibility = View.VISIBLE
                } else {
                    statusText.text = "Not signed in"
                    signInBtn.visibility = View.VISIBLE
                    backupBtn.visibility = View.GONE
                    restoreBtn.visibility = View.GONE
                    signOutBtn.visibility = View.GONE
                }
            }
            
            private fun signInToGoogle() {
                val signInIntent = googleSignInHelper.getSignInIntent()
                signInLauncher.launch(signInIntent)
            }
            
            private fun signOutFromGoogle() {
                googleSignInHelper.signOut {
                    updateSignInStatus()
                    Toast.makeText(this, "Signed out successfully", Toast.LENGTH_SHORT).show()
                }
            }
            
            private fun initializeSyncService() {
                lifecycleScope.launch {
                    val success = syncService.initialize()
                    if (!success) {
                        Toast.makeText(this@SyncSettingsActivity, "Failed to initialize sync", Toast.LENGTH_SHORT).show()
                    }
                }
            }
            
            private fun performBackup() {
                lifecycleScope.launch {
                    try {
                        val collection = org.y20k.transistor.core.Collection(application)
                        val stations = collection.stations
                        
                        Toast.makeText(this@SyncSettingsActivity, "Starting backup...", Toast.LENGTH_SHORT).show()
                        
                        val success = syncService.uploadStations(stations)
                        
                        if (success) {
                            Toast.makeText(this@SyncSettingsActivity, "Backup completed! (${stations.size} stations)", Toast.LENGTH_LONG).show()
                        } else {
                            Toast.makeText(this@SyncSettingsActivity, "Backup failed", Toast.LENGTH_SHORT).show()
                        }
                    } catch (e: Exception) {
                        Toast.makeText(this@SyncSettingsActivity, "Error: ${e.message}", Toast.LENGTH_SHORT).show()
                    }
                }
            }
            
            private fun performRestore() {
                lifecycleScope.launch {
                    try {
                        Toast.makeText(this@SyncSettingsActivity, "Checking for backup...", Toast.LENGTH_SHORT).show()
                        
                        val stations = syncService.downloadStations()
                        
                        if (stations != null && stations.isNotEmpty()) {
                            Toast.makeText(this@SyncSettingsActivity, "Restored ${stations.size} stations", Toast.LENGTH_LONG).show()
                        } else {
                            Toast.makeText(this@SyncSettingsActivity, "No backup found or backup is empty", Toast.LENGTH_SHORT).show()
                        }
                    } catch (e: Exception) {
                        Toast.makeText(this@SyncSettingsActivity, "Restore error: ${e.message}", Toast.LENGTH_SHORT).show()
                    }
                }
            }
        }
        EOF
        
    - name: Add sync menu option to MainActivity
      run: |
        # Add sync option to the main menu (this is a simple approach)
        echo "// Google Drive Sync option added via build script" >> app/src/main/java/org/y20k/transistor/MainActivity.kt
        
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Build debug APK with sync
      run: ./gradlew assembleDebug --stacktrace
      
    - name: Upload APK with sync
      uses: actions/upload-artifact@v4
      with:
        name: transistor-with-google-drive-sync
        path: app/build/outputs/apk/debug/*.apk
